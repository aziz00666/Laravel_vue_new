'use strict';

var simpleGit = require('simple-git');
var concat = require('concat-stream')
var simpleGitExtend = require('./simple-git-extension.js');

var EMPTY_REPO = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';

function fetch_diff(options, done) {
  var dir, remote, branch, remoteurl;

  var returnStream = concat(done);
  var repoDir;
  var repoStatus;
  var updateRepoStatus = function(err,status) { repoStatus = status; };
  var cmpDirToCommit;

  dir       = options.dir       ? options.dir       : '.';
  remote    = options.remote    ? options.remote    : 'origin';
  branch    = options.branch    ? options.branch    : 'master';
  remoteurl = options.remoteurl ? options.remoteurl : 'master';

  repoDir = simpleGit(dir);

  cmpDirToCommit = function(err, latestCommit) {
    var result;
    // diff working dir with fetched repo (tracked files)
    result = repoDir
      .diff([latestCommit], function(err, diff) {
        if (diff) {
          returnStream.write(diff);
        }

        if (repoStatus.not_added.length == 0) {
          returnStream.end();
        }
      });

    // diff working dir with fetched repo (untracked files)
    if (repoStatus.not_added.length > 0) {
      result = result
        .stash('save -u stash')
        // using "magic hash" that refers to empty repo
        // and stash^3 that refers to untracked files
        .diff([EMPTY_REPO, 'stash^3'], function(err, diff) {
          if (diff) {
            returnStream.write(diff);
          }

          returnStream.end();
        })
        .stash('pop');
    }

    return result;
  };

  simpleGitExtend(repoDir);

  repoDir.remoteList(function(err, remotes) {
    if ( (remotes[remote] && remotes[remote].fetch && !remoteurl) ||
         (remotes[remote] && remotes[remote].fetch && remotes[remote].fetch === remoteurl) )  {
      repoDir
        .fetch(remote, branch)
        .status(updateRepoStatus)
        .lastCommit(remote, branch, cmpDirToCommit);
    } else if (remoteurl) {
      // generating of random name for remote
      var tempRemote = 'temp';
      while(remotes[tempRemote]) tempRemote += (Math.random() * 10)|0;

      repoDir
        .addRemote(tempRemote, remoteurl)
        .fetch(tempRemote, branch)
        .status(updateRepoStatus)
        .lastCommit(tempRemote, branch, function(err,data) {
          cmpDirToCommit(err, data)
            .removeRemote(tempRemote);
        });
    } else {
      throw 'Use correct existing remote name and/or URL of remote';
    }
  });

  return repoDir;
}

module.exports = fetch_diff;